datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  email    String? @unique
  username String? @unique
  isAdmin  Boolean @default(false)

  paymentProcessorUserId        String?   @unique
  lemonSqueezyCustomerPortalUrl String? // You can delete this if you're not using Lemon Squeezy as your payments processor.
  subscriptionStatus            String? // 'active', 'cancel_at_period_end', 'past_due', 'deleted'
  subscriptionPlan              String? // 'hobby', 'pro'
  datePaid                      DateTime?
  credits                       Int       @default(3)

  gptResponses        GptResponse[]
  contactFormMessages ContactFormMessage[]
  tasks               Task[]
  files               File[]
  customers           Customer[]
  commentRequestCount Int                  @default(0)
  linkedInPosts       LinkedInPost[]
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content String
}

model Task {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  description String
  time        String  @default("1")
  isDone      Boolean @default(false)
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  name      String
  type      String
  key       String
  uploadUrl String
}

model DailyStats {
  id   Int      @id @default(autoincrement())
  date DateTime @unique @default(now())

  totalViews                Int    @default(0)
  prevDayViewsChangePercent String @default("0")
  userCount                 Int    @default(0)
  paidUserCount             Int    @default(0)
  userDelta                 Int    @default(0)
  paidUserDelta             Int    @default(0)
  totalRevenue              Float  @default(0)
  totalProfit               Float  @default(0)

  sources PageViewSource[]
}

model PageViewSource {
  name String
  date DateTime @default(now())

  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])
  dailyStatsId Int?

  visitors Int

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  message String
  level   String
}

model ContactFormMessage {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
}

model Customer {
  id                 String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  name               String
  user               User                 @relation(fields: [userId], references: [id])
  userId             String
  style              Style?
  persona            Persona?
  subscriptionPlan   String?
  subscriptionStatus String?
  dailyUsage         CustomerDailyUsage[]
  linkedInPosts      LinkedInPost[]

  // Neue Felder für LinkedIn Integration
  linkedinUserId              String?   // Eindeutige LinkedIn User ID (URN, z.B. "urn:li:person:xxxxxx")
  linkedinAccessToken         String?   @db.Text // Access tokens can be long
  linkedinAccessTokenExpiresAt DateTime? // Ablaufdatum des Access Tokens
  linkedinRefreshToken        String?   @db.Text // Refresh tokens can be long
  linkedinGrantedScopes       String[]  // Die vom Nutzer gewährten Scopes
  linkedinProfileData         Json?     // Zum Speichern von Basis-Profildaten (Name, Bild-URL, etc.) für die Anzeige
}

model CustomerDailyUsage {
  id                 String   @id @default(uuid())
  date               DateTime @db.Date
  customerId         String
  customer           Customer @relation(fields: [customerId], references: [id])
  commentGenerations Int      @default(0)

  @@unique([customerId, date], name: "customerDateUnique")
  @@index([date])
}

model Style {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  linkedinExamples String[]
  styleAnalysis    String

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @unique
}

model Persona {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  birthday        DateTime?
  jobDescription  String?
  fieldOfWork     String?
  customerProfile String?

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @unique
}

model SystemSettings {
  id                            Int      @id @default(1)
  styleAnalysisSystemPrompt     String?  @db.Text
  commentGenerationSystemPrompt String?  @db.Text
  linkedInPostGenerationSystemPrompt String? @db.Text
  updatedAt                     DateTime @updatedAt
}

model LinkedInPost {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hook    String @db.Text
  content String @db.Text
  cta     String @db.Text

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  schedule Schedule?
  linkedInPostUgcId String? @unique // To store the URN of the post created on LinkedIn
  imageS3Key        String?          // S3 key for the post image
  imageContentType  String?          // MIME type of the post image
}

model Schedule {
  linkedInPostId String @id @unique
  linkedInPost   LinkedInPost @relation(fields: [linkedInPostId], references: [id], onDelete: Cascade)

  postingDate DateTime
  reminderInMinutes Int?
  isReminderSent    Boolean  @default(false)
  isPosted          Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postingDate])
}

// Neues Modell zum Speichern des OAuth 'state' Parameters
model LinkedInAuthState {
  id                  String   @id @default(cuid())
  state               String   @unique // Der zufällige State-String
  customerId          String   // Die ID des Customers, für den die Auth initiiert wurde
  initiatingWaspUserId String  // Die ID des Wasp-Users, der den Vorgang gestartet hat
  createdAt           DateTime @default(now())
  expiresAt           DateTime // Setze eine kurze Ablaufzeit (z.B. 10 Minuten)

  @@index([expiresAt])
}
